// –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram webhook
try {
  require('dotenv').config();
} catch (e) {
  // dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è production
}

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const SECRET_TOKEN = process.env.TELEGRAM_SECRET_TOKEN;
const NETLIFY_URL = process.env.NETLIFY_URL;

if (!BOT_TOKEN) {
  console.error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

async function setWebhook() {
  try {
    const webhookUrl = `${NETLIFY_URL}/.netlify/functions/telegram-bot`;
    
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook...');
    console.log(`URL: ${webhookUrl}`);
    
    const payload = {
      url: webhookUrl,
      allowed_updates: ['message', 'callback_query']
    };
    
    if (SECRET_TOKEN) {
      payload.secret_token = SECRET_TOKEN;
      console.log('Secret token –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    }
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    
    const result = await response.json();
    
    if (result.ok) {
      console.log('Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
      console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${result.description}`);
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook:', result.description);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

async function getWebhookInfo() {
  try {
    console.log('\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º webhook:');
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`);
    const result = await response.json();
    
    if (result.ok) {
      const info = result.result;
      console.log(`URL: ${info.url || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
      console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${info.pending_update_count}`);
      
      if (info.last_error_message) {
        console.log(`–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${info.last_error_message}`);
      }
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', result.description);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

async function deleteWebhook() {
  try {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ webhook...');
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`, {
      method: 'POST'
    });
    
    const result = await response.json();
    
    if (result.ok) {
      console.log('Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:', result.description);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const command = process.argv[2];

switch (command) {
  case 'set':
    setWebhook();
    break;
  case 'info':
    getWebhookInfo();
    break;
  case 'delete':
    deleteWebhook();
    break;
  default:
    console.log(`
üîß –£—Ç–∏–ª–∏—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram webhook

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run setup-webhook set     # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook
  npm run setup-webhook info    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
  npm run setup-webhook delete  # –£–¥–∞–ª–∏—Ç—å webhook

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  TELEGRAM_BOT_TOKEN     - –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  TELEGRAM_SECRET_TOKEN  - –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  NETLIFY_URL           - URL –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ –Ω–∞ Netlify

–ü—Ä–∏–º–µ—Ä:
  NETLIFY_URL=https://your-bot.netlify.app npm run setup-webhook set
`);
    break;
}